#!/usr/bin/perl

use warnings;
use strict;
use Bio::SeqIO;
use Getopt::Long;

#this script takes (a) a file of the positions desired and (b) alignment file(s). It then trims all sequences based on those positions, concatenating those sections together

## usage:  trimalignmentmulti.bioperl coordsfilename.txt seqfilename.fa

#arg1 coordsfilename - coords are one segment per line, tab delimited start-end
#arg2 seqfilename - sequences, fasta format

################# parameters:

my $outputFileExtension = ".segmentsJoined.fa";

my $joinString = "";
#my $joinString = "NNNNNN";            ## 6bp 

my $coordSystem = "regular"; 
# regular = straight-up 1-based coords for start and end
# codons = working with a NT alignment, but specifying positions when that same alignment is viewed as AA

#### if a seq has no letters left after trimming, don't output
my $skipEmptySeqs = 1;

## get any non-default options from commandline
GetOptions("join=s" => \$joinString,
           "coords=s" => \$coordSystem,
           "skipEmpty=i" => \$skipEmptySeqs,
           "outTag=s" => \$outputFileExtension
            ) or die "\n\nterminating - unknown option(s) specified on command line\n\n";

#################  

if (@ARGV < 2) {
    die "\n\nterminating - should specify at least two arguments. usage: \n     trimalignmentmulti.bioperl coordsfilename.txt seqfilename.fa\n (a) coordsfilename = a file of the positions desired and (b) seqfilename = alignment file(s). \n\n";
}
if (($coordSystem ne "regular") & ($coordSystem ne "codons")) {
    die "\n\nterminating - coords must be either regular or codons\n\n";
}

if ($coordSystem eq "codons") {
    print "\n\nScript specifies that coordinates are in amino acids, for a nucleotide alignment. Converting coordinates\n\n";
}

### get the positions
my $positionsFile = shift @ARGV;
if (!-e $positionsFile) {
    die "\n\nterminating - cannot open file $positionsFile\n\n"; 
}

print "\njoining segments with this string: $joinString\n\n";

my @starts; my @ends;
open (POS, "< $positionsFile");
while (<POS>) {
    my $line = $_; chomp $line; my @f = split /\t/, $line;
    my $start = $f[0]; my $end = $f[1];
    print "start $start end $end\n";
    if ($coordSystem eq "codons") {
        print "    converted amino acid coordinates to corresponding nucleotide positions\n";
        $start = (($start - 1) * 3) + 1;
        $end = $end*3;
        print "        start2 $start end2 $end\n\n";
    }
    push @starts, $start;
    push @ends, $end;
}
close POS;

my $numSegments = @starts;
if ($numSegments == 0) {
    die "\n\nterminating - no segments were specified\n\n";
}
### go through alignment files
foreach my $infile (@ARGV) {
    if (!-e $infile) {
        die "\n\nterminating - sequence file $infile does not exist\n\n";
    }
    my $outfile = $infile; $outfile =~ s/\.fasta$//; $outfile =~ s/\.fa$//;
    $outfile .= $outputFileExtension;
    ## make sure they go in current dir
    if ($outfile =~ m/\//) {$outfile = (split /\//, $outfile)[-1];}
    
    my $seqIN = Bio::SeqIO->new(-file=>"< $infile", -format=>'fasta');
    my $seqOUT = Bio::SeqIO->new(-file=>"> $outfile", -format=>'fasta');
    while (my $thisseq = $seqIN->next_seq() ) {
        my $letters = $thisseq->seq();
        my $seqlen = $thisseq->length();
        my $id = $thisseq->display_id();
        my @allstarts = @starts;
        my @allends = @ends;
        my $newLetters = "";
        for (my $i=0;$i<$numSegments;$i++) {
            my $thisstart = shift @allstarts;
            my $thisend = shift @allends;
            if (($thisstart > $seqlen) || ($thisend > $seqlen)) {
                die "\n\nterminating - requested a segment with coords $thisstart - $thisend that goes off the end of the sequence\n\n";
            }
            #print "i $i thisstart $thisstart thisend $thisend\n";
            my $thislen = $thisend + 1 - $thisstart;
            my $thissubstr = substr($letters, ($thisstart-1), $thislen);
            $newLetters .= $thissubstr;
            unless ($i == ($numSegments-1) ) {
                $newLetters .= $joinString;
            }
        }
        ### is there any aligned seq left after trimming? 
        if ($skipEmptySeqs == 1) {
            my $tempLetters = $newLetters; $tempLetters =~ s/-//g;
            if (length($tempLetters) == 0) {
                print "    Skipping seq $id - no letters left after trimming\n";
                next;
            }
        }
        my $newSeq = Bio::Seq->new(-seq=>$newLetters, -display_id=>$id);
        $seqOUT -> write_seq($newSeq);
    }

}

