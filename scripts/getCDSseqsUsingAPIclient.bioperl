#!/usr/bin/perl

use warnings;
use strict;
use Bio::SeqIO;
use JSON;
use Getopt::Long;
use Data::Dumper;

### script to take bed12 files, figure out from file name what assembly they are from, and use ucscApiClient to get the sequence of the CDS (or the transcript)

## example of ucscApiClient use
# ucscApiClient -p "/getData/sequence" "genome=hg38;chrom=chr1;start=11110531;end=11110538"

my $returnType = "transcript";
my $inferAssembly = 1;
my $assemblyName;
my $usePreviewSite = 1;  ## for genomes not available at the main UCSC site, should we try the preview site? default is yes.
my $maxNs = 0.2;  # proportion of the seq that can be Ns. Set this to 1 to not filter on N content

## get any non-default options from commandline
GetOptions("returnType=s" => \$returnType, # cds or transcript
           "inferAssembly=i" => \$inferAssembly,
           "assemblyName=s" => \$assemblyName,
           "usePreviewSite=i" => \$usePreviewSite,
           "maxNs=i" => \$maxNs
           ) or die "\n\nterminating - unknown option(s) specified on command line\n\n";


my $assemblyListFile = "/fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/conservation_tracks/README.placentalMammals.txt";


# https://genome-preview.soe.ucsc.edu/cgi-bin/hubApi/getData/sequence?genome=camFer1;chrom=KB016485;start=316036;end=318886

######

if (@ARGV==0) {
    die "\nUsage: getCDSseqsUsingAPIclient.bioperl bed12file(s).bed\n\n";
}
if ($maxNs < 1) {
    print "\n\nIgnoring sequences where proportion of N bases is >$maxNs\n\n";
}

## check that ucscApiClient is in my path (need to have loaded Kent_tools module)
my $whichExe = `which ucscApiClient`;
if ($whichExe eq "") {
    die "\n\nterminating - please run this command before running getCDSseqsUsingAPIclient.bioperl :\n\nmodule load Kent_tools\n\n";
}

## get list of acceptable assemblies
open (ASSEMBLIES, "< $assemblyListFile");
my %assemblies;
while (<ASSEMBLIES>) {
    my $line = $_; chomp $line;
    $assemblies{$line} = 1;
}
close ASSEMBLIES;

BEDLOOP: foreach my $bed (@ARGV) {
    if (!-e $bed) {
        die "\n\nterminating - cannot open bed file $bed\n\n";
    }
    if ($bed =~ m/unmapped/) {
        die "\n\nterminating - you probably don't want to run this script on unmapped liftOver outputs\n\n";
    }
    print "\n### working on bed file $bed\n";
    
    ## initiate output files
    my $out = $bed; $out =~ s/\.bed$//; $out .= ".$returnType.fa";
    my $log = $bed; $log =~ s/\.bed$//; $log .= ".getCDSlog.txt";
    if (-e $out) {
        print "    skipping this one - output exists\n";
        next;  
    }
    my $seqOUT = Bio::SeqIO->new(-file=>"> $out", -format=>"fasta");
    open (LOG, "> $log");
    
    ## which assembly should I be getting seqs from?
    my $assembly;
    if ($inferAssembly == 1) {
        # $assembly = (split /\./, $bed)[2];
        $assembly = $bed; 
        $assembly =~ s/allRefSeqs\.hg38\.justCDS\.liftOver\.//;
        $assembly =~ s/allRefSeqs\.liftOver\.//;
        $assembly =~ s/\.mapped\.bed//;
        if(!defined $assemblies{$assembly}) {
            die "\n\nterminating - I inferred assembly name to be $assembly by parsing bed file name, but that assembly is not listed in $assemblyListFile\n\n";
        }
        print "    assembly inferred from filename: $assembly\n";
    } else {
        $assembly = $assemblyName;
        print "    assembly supplied on command line: $assembly\n";
    }
    ## start getting seqs:
    my %seqsSeenThisBed; # so I don't create two seqs with the same name in the output
    open (BED, "< $bed");
    REGIONLOOP: while (<BED>) {
        my $line = $_; chomp $line; my @f = split /\t/, $line;
        my $seq = $f[0]; my $id = $f[3]; my $strand = $f[5];
        my $thinStart = $f[1]; my $thinEnd = $f[2];
        my $thickStart = $f[6]; my $thickEnd = $f[7];
        my $numBlocks = $f[9]; my $blockSizes = $f[10]; my $blockStarts = $f[11];
        
        ## get thickStart and thickEnd relative to the start of the whole region
        my $thickStartRelative = $thickStart - $thinStart;
        my $thickEndRelative = $thickEnd - $thinStart;
        
        # check we don't have duplicate seq names
        if (defined $seqsSeenThisBed{$id}) {
            print "    WARNING - there is >1 seq with the same ID: $id\n";
        }
        $seqsSeenThisBed{$id} = 1;
        
        my $getSeqCommand = "ucscApiClient -p \"/getData/sequence\" \"genome=$assembly;chrom=$seq;start=$thinStart;end=$thinEnd\"";
        #print "    running getSeqCommand:    $getSeqCommand\n";
        my $stdErrFile = "/tmp/program.stderr";
        my $seqJSON = `$getSeqCommand 2>$stdErrFile`;
        
        my $apiClientStatus = checkStdErrFile($stdErrFile);
        if ($apiClientStatus eq "genomeMissing") {
            if ($usePreviewSite == 1) {
                unlink $stdErrFile;
                my $altCommand = "curl -s \"https://genome-preview.soe.ucsc.edu/cgi-bin/hubApi/getData/sequence?genome=$assembly;chrom=$seq;start=$thinStart;end=$thinEnd\"";
                $seqJSON = `$altCommand 2>$stdErrFile`;
                $apiClientStatus = checkStdErrFile($stdErrFile);
                if ($apiClientStatus eq "genomeMissing") {
                    ## missing, even after tried the preview site
                    print "\n    neither ucscApiClient or preview site appears to support this genome - skipping this bed file\n\n";
                    print LOG "$assembly\tAssembly not supported by ucscApiClient or preview site\n";
                    unlink $out; close BED; close LOG;
                    next BEDLOOP;
                } else {
                    print LOG "$altCommand\n";
                }
            } else {
                ## missing, but we did not try the preview site
                print "\n    ucscApiClient does not appear to support this genome and we are not trying the preview site - skipping this bed file\n\n";
                print LOG "$assembly\tAssembly not supported by ucscApiClient, did not try preview site\n";
                unlink $out; close BED; close LOG;
                next BEDLOOP;
            }
        } else {
            ## original ucscApiClient command worked:
            print LOG "$getSeqCommand\n";
        }
        my $seqDecodedRef = decode_json($seqJSON); #it is a hash ref
        my %seqDecoded = %$seqDecodedRef;
        if (!defined $seqDecoded{'dna'}) {
            print "\n\nterminating - did not find DNA sequence in the output of ucscApiClient. Here's the raw output:\n$seqJSON\n\n";
            die;
        }
        my $dna = $seqDecoded{'dna'};
        
        ## now parse the blocks and get their sequence
        my @bStarts = split /\,/, $blockStarts; my @bSizes = split /\,/, $blockSizes;
        my $fullseq = "";
        for (my $i=0; $i<$numBlocks; $i++) {
            ## if we're looking for the CDS, trim to thickStart/thickEnd
            my $blockStart = $bStarts[$i];
            my $blockEnd = $bStarts[$i] + $bSizes[$i];
            my $blockSize = $bSizes[$i];
            if ($returnType eq "cds") {
                # ignore exons entirely before thickStart
                if ($blockEnd < $thickStartRelative) { next; }
                # ignore exons entirely after thickEnd
                if ($blockStart > $thickEndRelative) { next; }
                # trim exons that overlap thickStart
                if ($blockStart < $thickStartRelative) {
                    $blockStart = $thickStartRelative;
                    $blockSize = $blockEnd - $blockStart;
                }
                # trim exons that overlap thickEnd
                if ($blockEnd > $thickEndRelative) {
                    $blockEnd = $thickEndRelative;
                    $blockSize = $blockEnd - $blockStart;
                }
            }
            
            # block starts are relative to chromStart, so it's easy to get the seq
            my $blockSeq = substr $dna, $blockStart, $blockSize;
            $fullseq .= $blockSeq;
        }
        if ($fullseq eq "") {
            die "\n\nterminating - did not get any sequence for this line: $line\n\n";
        }
        
        my $newname = $id . "_" . $assembly;
        
        ## check for seqs that have large blocks of Ns
        if ($maxNs < 1) {
            my $fullseq_noNs = $fullseq; $fullseq_noNs =~ s/N//gi;
            my $proportionNs = 1 - length($fullseq_noNs) / length($fullseq);
            if ($proportionNs > $maxNs) {
                $proportionNs = sprintf("%.1f", 100*$proportionNs);
                print "    WARNING - ignoring seq $newname, because $proportionNs % of bases are Ns\n";
                print LOG "    WARNING - ignoring seq $newname, because $proportionNs % of bases are Ns\n";
                next REGIONLOOP;
            }
        }
        ## make a seq object
        my $seqObj = Bio::Seq->new(-seq=>$fullseq, -display_id=> $newname);
        
        ## perhaps reverse-complement
        if ($strand eq "-") { $seqObj=$seqObj->revcom(); }
        
        ## write it out
        $seqOUT->write_seq($seqObj);
    }  ## end of loop processing each BED line
    close BED;
    close LOG;
}


sub checkStdErrFile {
    my $stdErrFile = $_[0];
    my $status = "";
    if (-z $stdErrFile) {
        $status = "noErrors";
    } else {
        open (ERR, "< $stdErrFile");
        my @lines;
        while(<ERR>) {
            my $line = $_; push @lines, $line;
            if ($line =~ m/can not find genome/) { $status = "genomeMissing"; }
        }
        close ERR;
        if ($status ne "genomeMissing") {
            die "\n\nterminating - unexpected error from ucscApiClient:\n@lines\n\n";
        }
    }
    return($status);
}
