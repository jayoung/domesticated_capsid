#!/usr/bin/perl 

use warnings;
use strict;
use Bio::SeqIO;

#takes the fasta file specified on the command line, and reorders sequences as specified in the second command line argument

#usage: reorderseqs.pl seqs.fasta orderedlist.txt

#################

if (@ARGV < 2) {
    die "\n\nterminating - please specify (a) seqs.fasta (b) orderedlist.txt\n\n";
}
my $file = $ARGV[0];
my $orderedlistfile = $ARGV[1];
if (!-e $file) { die "\n\nterminating - seqfile $file does not exist\n\n"; }
if (!-e $orderedlistfile) { die "\n\nterminating - seq order file $orderedlistfile does not exist\n\n"; }

####

my $out = $file;
$out =~ s/\.fasta$//;
$out =~ s/\.fa$//;
$out =~ s/\.fas$//;
$out = "$out".".sorted.fa";

####

my $seqIN = Bio::SeqIO->new(-format=>"fasta", -file=>"< $file");
my %seqs;
while (my $seq = $seqIN->next_seq) {
    my $header = $seq->display_id();
    $seqs{$header} = $seq;
    #print "read seq $header BLAH\n";
}

my $seqOUT = Bio::SeqIO->new(-format=>"fasta", -file=>"> $out");
open (LIST, "< $orderedlistfile");
while (<LIST>) {
    my $seq = $_; chomp $seq;
    $seq =~ s/^>//;
    #print "line1 $seq blah\n";
    #next;
    #$seq =~ s/\|/_/;
    #$seq = (split /\t/, $seq)[0] || $seq;
    #$seq =~ s/s/_/;
    #print "line2 $seq"."BLAH\nblah\n";
    if ($seq =~ m/\s/) { $seq = (split /\s/, $seq)[0] ; }
    if (!defined $seqs{$seq}) {
        print "    WARNING - seq $seq was not in seqfile $file\n";
        next;
    }
    $seqOUT->write_seq($seqs{$seq});
}
close LIST;
