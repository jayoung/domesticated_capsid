

xxx should I use orthodb or Ensembl alignments?


##### workflow, in detail

## (1) take all human seq names in 2020.23.10.CA.Hs.refseq.accessions.csv and ../fromWill/2_2020_Oct23_seqs/2020.23.10.CA.final.seqs.refseq.repbase.accessions.csv (a mix of Refseq and repbase proteins, including some that may have droppped out when Will did CD-Hit and Trimal filters

cd ~/FH_fast_storage/miscMalikLab/domesticated_gags_BlakeWiedenheft/getHumanPepsFromWillFiles

../scripts/getHumanSeqsFullLen.bioperl
../scripts/getHumanSeqsJustCapsid.bioperl

there are 71 different seqs to get, after combining those two lists

some seqs are in Will's seq file twice, looks like because they either had two chunks of match to an HMM, or they matched two different HMMs.  He does have a downstream step of using CD-HIT to get rid of redundant seqs, so only one will have made it into his alignment and tree, which is good.  I'll just keep the first one here, doesn't matter which I keep 
    WARNING - found seq NP_001338223.1 more than once, that's OK
    WARNING - found seq NP_001338222.1 more than once, that's OK
    WARNING - found seq NP_001019626.1 more than once, that's OK
    WARNING - found seq XP_024308194.1 more than once, that's OK
    WARNING - found seq NP_001128360.1 more than once, that's OK
    WARNING - found seq NP_001165908.1 more than once, that's OK
    WARNING - found seq NP_001171890.1 more than once, that's OK
    WARNING - found seq NP_055883.2 more than once, that's OK
    WARNING - found seq NP_001354699.1 more than once, that's OK
    WARNING - found seq NP_001341909.1 more than once, that's OK
    WARNING - found seq NP_001035242.1 more than once, that's OK
    WARNING - found seq NP_001171891.1 more than once, that's OK
    WARNING - found seq NP_001165909.1 more than once, that's OK

## look at the genbank entries for the seqs Will got from RefSeq: 
# get plain Refseqs:
../scripts/getRefSeqAccs.bioperl 2020.23.10.humanSeqs.CAonly.Refseq.fa  2020.23.10.humanSeqs.fullLen.Refseq.fa

diff 2020.23.10.humanSeqs.CAonly.Refseq.accs.txt 2020.23.10.humanSeqs.fullLen.Refseq.accs.txt
    they're the same, so I can just use one
rm 2020.23.10.humanSeqs.CAonly.Refseq.accs.txt
../scripts/getgenbankJY_eutils_gbFormat.bioperl 2020.23.10.humanSeqs.fullLen.Refseq.accs.txt

mv 2020.23.10.humanSeqs.fullLen.Refseq.accs.txt 2020.23.10.humanSeqs.fullLen.Refseq.accs.txt.gb  fullGenbankEntries/


## make some of tables summarizing info in the genbank entry
cd ~/FH_fast_storage/miscMalikLab/domesticated_capsid/getHumanPepsFromWillFiles/fullGenbankEntries
../../scripts/genbank2table.bioperl 2020.23.10.humanSeqs.fullLen.Refseq.accs.txt.gb 

output = 
2020.23.10.humanSeqs.fullLen.Refseq.accs.txt.info.byAccession.txt
    (one row per Refseq ID)
2020.23.10.humanSeqs.fullLen.Refseq.accs.txt.info.refs.txt
    (one row per reference mentioned in those refseq entries)
2020.23.10.humanSeqs.fullLen.Refseq.accs.txt.info.byGene.txt
    (one row per gene)


## get placental mammal maf file for each transcript using RefSeq ID:
cd ~/FH_fast_storage/miscMalikLab/domesticated_capsid/multiz_alignments
module load Kent_tools
../scripts/getBedAndMaf.pl
module purge


#
../scripts/maf2fasta_JY.bioperl *placMamm.maf
    remove all gaps, and realign *placMamm.fa.nogaps using MACSE:
../scripts/removegapsfromseq.bioperl *placMamm.fa
../scripts/runMACSEsimpleInFrameAlignment.pl *placMamm.fa.nogaps
    took a while, but all finished fine
../scripts/reorderseqsMACSEbasedOnInputFile.bioperl --verbose=0 *aln1_NT.fa 

../scripts/checkAlignmentFrameshiftsStops.bioperl --MACSE=1 *aln1_NT.sorted.fa


../scripts/removegapsfromalignmentinframeonly.pl *.sorted.noPseuds.fa


mkdir aa_justAlignments
mkdir aa_justAlignments/allPlacMammals aa_justAlignments/noPseuds

cp *noPseuds.fa.degapcodon aa_justAlignments/noPseuds
cp *aln1_NT.sorted.fa aa_justAlignments/allPlacMammals

xxx problem:
species where there is a gap with unalignable stuff in it appear as pseudogenes when they're not really, e.g. CCDC8 rheMac3

I may be able to use liftover to get seqs to align, instead of mafs.  that would work with rheMac3 and susScr3 for CCDC8 and give me intact seqs

I think I would have to download the chain files

#### getting DNA seqs from remote repo:
# 1.  this gets a 7bp long sequence. I think output is in json format?
ucscApiClient -getDnaExample   
Example request for obtaining DNA sequence:
https://api.genome.ucsc.edu/getData/sequence?genome=hg38;chrom=chr1;start=11110531;end=11110538
{"downloadTime": "2020:12:15T14:28:55Z", "downloadTimeStamp": 1608042535, "genome": "hg38", "chrom": "chr1", "start": 11110531, "end": 11110538, "dna": "gattaca"}

pushd ~/public_databases/UCSC/human_Dec2013/liftOverFiles
wget --timestamping  'ftp://hgdownload.cse.ucsc.edu/goldenPath/hg38/liftOver/hg38ToSusScr3.over.chain.gz' 
popd


######## getting alignments via liftOver, rather than through 100-way maf:

"The over.chain files that the liftOver tool uses for coordinate conversions are less stringent compared to the filtered alignments used in the reciprocal best files, which constructs this particular multiz track."


### download the relevant chain files for liftOver:

scripts/getChainFiles.pl

did this once with the assemblies listed in the 100-way mafs (README.placentalMammals.txt), but then manually chose some newer assemblies and put their names in
~/public_databases/UCSC/human_Dec2013/conservation_tracks/README.placentalMammals.newerAssemblies.txt


### prep bed file for all RefSeq genes:
cd liftOver_alignments
cat ../multiz_alignments/*bed > allRefSeqs.hg38.bed


## get only the CDS, as liftOver in sensitive to bits that are missing, and I only care about the CDS.  I initially did it with the full length of the transcript - moved results to liftOverFiles_fullTranscript

I wrote a script to do get a new bed file that shows only the CDS, although I had also asked scicomp to installed a program called bedparse that should do the same thing: 
https://bedparse.readthedocs.io/en/stable/Usage.html
usage: bedparse cds transcripts.bed 

cd liftOver_alignments
../scripts/bed12_getCDSonly.pl allRefSeqs.hg38.bed 


### use liftOver (for now, this still tries to get full transcript, not just CDS)
../scripts/runLiftOver.pl
mv allRefSeqs.hg38.justCDS.liftOver.* liftOverFiles_justCDS/liftOverFiles

I checked results for chimp (panTro4). With the scicomp installed version of liftOver (Kent_tools/20200519-linux.x86_64), there was one unmapped transcript that should have been mapped according to online liftOver (NM_001143978.3).  With a newly downloaded liftOver, it was mapped.

## get cds seqs using liftOver mapped.bed files:

I use ucscApiClient and the coords in the bed file to get sequences, line by line, parsing the resulting JSON output to get a fasta file. Reverse-complement if needed. 

cd ~/FH_fast_storage/miscMalikLab/domesticated_capsid/liftOver_alignments/liftOverFiles_justCDS/liftOverFiles
module load Kent_tools
../../../scripts/getCDSseqsUsingAPIclient.bioperl -returnType=cds *.mapped.bed 
module purge

The unmapped.bed file will record which queries I don't have.
The getCDSlog.txt files would record any species that totally failed, but there are none
    grep 'Assembly not supported' *log.txt  | wc

I ignore seqs that have >20% Ns - there are 36 seqs:
    grep 'ignoring seq' *log.txt  | wc


## collect together each ortholog for each gene
../../../scripts/compileSameTranscriptSeqs.bioperl ../../allRefSeqs.hg38.cds.fa *cds.fa
mv *cdsSeqs.fa ../alignments/
cd ../alignments/

## align with MACSE
../../../scripts/runMACSEsimpleInFrameAlignment.pl *cdsSeqs.fa
    ran (using sbatch)
../../../scripts/reorderseqsMACSEbasedOnInputFile.bioperl --verbose=0 *aln1_NT.fa 
../../../scripts/checkAlignmentFrameshiftsStops.bioperl --MACSE=1 *aln1_NT.sorted.fa
../../../scripts/removegapsfromalignmentinframeonly.pl *.sorted.noPseuds.fa


mkdir aa_justAlignments
mkdir aa_justAlignments/allPlacMammals aa_justAlignments/noPseuds

cp *noPseuds.fa.degapcodon aa_justAlignments/noPseuds
cp *aln1_NT.sorted.fa aa_justAlignments/allPlacMammals

then used R script to make a plot



######## use liftOver but on a newer set of assemblies that were found in the 100-way maf:

cd ~/FH_fast_storage/miscMalikLab/domesticated_capsid/liftOver_alignments/liftOverFiles_justCDS_newAssemblies/liftOverFiles

../../../scripts/runLiftOver.pl -assemblies=/fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/conservation_tracks/README.placentalMammals.newerAssemblies.txt
     xxx

module load Kent_tools
../../../scripts/getCDSseqsUsingAPIclient.bioperl -assemblies=/fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/conservation_tracks/README.placentalMammals.newerAssemblies.txt -returnType=cds *.mapped.bed 
module purge

The unmapped.bed file will record which queries I don't have.
The getCDSlog.txt files would record any species that totally failed, but there are none
    grep 'Assembly not supported' *log.txt  | wc

I ignore seqs that have >20% Ns - there are 33 seqs:
    grep 'ignoring seq' *log.txt  | wc


## collect together each ortholog for each gene
../../../scripts/compileSameTranscriptSeqs.bioperl -assemblies=/fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/conservation_tracks/README.placentalMammals.newerAssemblies.txt ../../allRefSeqs.hg38.cds.fa *cds.fa
mv *cdsSeqs.fa ../alignments/
cd ../alignments/

## align with MACSE
../../../scripts/runMACSEsimpleInFrameAlignment.pl *cdsSeqs.fa
    ran (using sbatch)
../../../scripts/reorderseqsMACSEbasedOnInputFile.bioperl --verbose=0 *aln1_NT.fa 
../../../scripts/checkAlignmentFrameshiftsStops.bioperl --MACSE=1 *aln1_NT.sorted.fa
../../../scripts/removegapsfromalignmentinframeonly.pl *.sorted.noPseuds.fa


mkdir aa_justAlignments
mkdir aa_justAlignments/allPlacMammals aa_justAlignments/noPseuds

cp *noPseuds.fa.degapcodon aa_justAlignments/noPseuds
cp *aln1_NT.sorted.fa aa_justAlignments/allPlacMammals

then used R script to make a plot



###########

###  xxx blast/blat the liftOver seqs to a reference human database - are they going to correct human gene, or to a paralog?

cd ~/FH_fast_storage/miscMalikLab/domesticated_capsid/liftOver_alignments/liftOverFiles_justCDS_newAssemblies/alignments

../../../scripts/checkOrthologsBlastBackOK_sbatchWrapper.bioperl  *.cdsSeqs.fa 

looks like probably quite a few non-orthologs

I put the old alignments here: ../alignments_beforeBlastBack/

mv */*goodOrthologs.fa .
../../../scripts/runMACSEsimpleInFrameAlignment.pl *goodOrthologs.fa
     xxxx running
     xxx redo git sync after they finish
     xxx remake plots. have a look. but they're still probably mixing up paralogs
     
     



xxx align paralogs with each other? ensure I don't have wrong orthologs
e.g. ZCCHC12 and ZCCHC18 are primate-specific paralogs of one another according to Ensembl
and there are various other duplications in that family e.g in carnivores


xxx perhaps I want to use more recent genomes for some species?


xxx model 0 paml:
~/FH_fast_storage/miscMalikLab/domesticated_capsid/liftOver_alignments/liftOverFiles_justCDS_newAssemblies/alignments

######### comparing multiz- and liftOver-based alignments

Using liftOver means the number of things called pseudogenes is a lot lower (e.g. for CCDC8). 
The maf alignments missed out poorly-aligning but in-frame regions

But using liftOver means some species are missing entirely (e.g. for ARC), because liftOver failed.

# try playing with liftOver parameters to report partial genes, or fudge edges, will also improve its hit rate:

cd ~/FH_fast_storage/miscMalikLab/domesticated_capsid/liftOver_alignments/test

## test on ARC in rhesus - assembly gap means first 98 bp are missing
grep 'NM_015193' ../allRefSeqs.hg38.justCDS.bed  > ARC_NM_015193.bed

## default settings - no hit
../liftOver -minMatch=0.1 ARC_NM_015193.bed /fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/liftOverFiles/hg38ToRheMac3.over.chain.gz ARC_NM_015193.liftOver.rheMac3.default.mapped.bed  ARC_NM_015193.liftOver.rheMac3.default.unmapped.bed

## add fudgeThick - no hit
../liftOver -minMatch=0.1 -fudgeThick ARC_NM_015193.bed /fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/liftOverFiles/hg38ToRheMac3.over.chain.gz ARC_NM_015193.liftOver.rheMac3.fudgeThick.mapped.bed  ARC_NM_015193.liftOver.rheMac3.fudgeThick.unmapped.bed

## add fudgeThick and minBlocks=0.1 - no hit
../liftOver -minMatch=0.1 -minBlocks=0.1 -fudgeThick ARC_NM_015193.bed /fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/liftOverFiles/hg38ToRheMac3.over.chain.gz ARC_NM_015193.liftOver.rheMac3.minBlockfudgeThick.mapped.bed  ARC_NM_015193.liftOver.rheMac3.minBlockfudgeThick.unmapped.bed

## add -multiple - no hit.
../liftOver -minMatch=0.1 -minBlocks=0.1 -fudgeThick -multiple ARC_NM_015193.bed /fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/liftOverFiles/hg38ToRheMac3.over.chain.gz ARC_NM_015193.liftOver.rheMac3.minBlockfudgeThickMultiple.mapped.bed  ARC_NM_015193.liftOver.rheMac3.minBlockfudgeThickMultiple.unmapped.bed



xx other ideas:



use BLAT or sim4-like program to get intact and pseudogenes from entire assemblies (should get pseudogenes as well), and blat/blast back to human to check we get the right bits

use liftOver to get a bigger region from the genome, then use sim4 or BLAT to get the spliced CDS

xxxx


xxx next:
    make tables summarizing NUMBERS of intact/pseudo?
    make tables summarizing intact/pseud status by species?
    dN/dS model 0 across vertebrates?
    primate positive selection?



xxx what to do with the Repbase things that Will found?  I think I will want to
1. find where they are in the hg38 - there will be multiple versions of each
2. ignore any that overlap with the things I already looked at because they're in the RefSeq set
3. look at the rest and see if there is an intact ORF, and if so do the same thing with getting the mafs and processing them


## after looking at the gene names in 2020.23.10.humanSeqs.fullLen.Refseq.accs.txt.info.byGene.txt, and a review paper by Kaneko-Ishino (fig 7), I realized there are a few more that Will might be missing:
RTL4
RTL9
PNMA8C
PNMA6B (pseudogene)

# get their seqs and do PFAM search
cd ~/FH_fast_storage/miscMalikLab/domesticated_capsid/additionalHits
../scripts/getgenbankJY_eutils_gbFormat.bioperl RTL4.txt RTL9.txt PNMA8C.txt
../scripts/genbank2fasta.bioperl RTL4.txt.gb RTL9.txt.gb PNMA8C.txt.gb
../scripts/searchPFAMprotqueryNew.pl RTL4.txt.gb.fa RTL9.txt.gb.fa PNMA8C.txt.gb.fa
../scripts/searchPFAMprotqueryNewMoreSensitive.pl RTL4.txt.gb.fa RTL9.txt.gb.fa PNMA8C.txt.gb.fa 
    xxxx should they have been in Will's table? maybe they don't have the capsid region? if so tell him


## (3) figure out for each location(s) in the human genome (hg38)
   ## which human genome version?  hg38 or hg19? whichever has more conservation tracks available.  hg38 and hg19 both have 100 vertebrates. hg38 also has a 27 (or 30?) primates track, and hg19 does not.  USE HG38.
   
   ## (i) For the Refseq proteins I'll try BLAT looking at exact and almost exact matches - try require 95% identity

cd ~/FH_fast_storage/miscMalikLab/domesticated_gags_BlakeWiedenheft/mapToHg38/Refseq
ln -s ../../getHumanPepsFromWillFiles/*Refseq.fa .

# get ooc file for hg38 for blatX searches:
pushd ~/public_databases/UCSC/human_Dec2013
blat hg38.fa /dev/null /dev/null -t=dnax q=prot -makeOoc=5.dnax.ooc -repMatch=1024 -tileSize=5 
popd

# do searches
blat /fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/hg38.fa 2020.23.10.humanSeqs.CAonly.Refseq.fa -t=dnax -q=prot -ooc=/fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/5.dnax.ooc -minIdentity=95 2020.23.10.humanSeqs.CAonly.Refseq.blatHg38.psl

blat /fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/hg38.fa 2020.23.10.humanSeqs.fullLen.Refseq.fa -t=dnax -q=prot -ooc=/fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/5.dnax.ooc -minIdentity=95 2020.23.10.humanSeqs.fullLen.Refseq.blatHg38.psl


## (ii) For the Repbase proteins I will want to be a bit more tolerant of mismatch, but I can exclude hits with frameshifts/stops



##### playing with UCSC 100-way vertebrate alignments

cd ~/FH_fast_storage/miscMalikLab/domesticated_capsid/testData/multiz_alignments/ZCCHC12

### getting maf files, given a bed file:
cd ~/FH_fast_storage/miscMalikLab/domesticated_capsid/testData/multiz_alignments/PNMA3

module load Kent_tools
mafFetch hg38 multiz100way PNMA3region.bed PNMA3region.100way.maf
    not sure what it would do if my bed interval contained blocks?  I will want that to work, I think


grep 'NM_013364'  ~/public_databases/UCSC/human_Dec2013/misc_tracks/hg38.refGene.2020dec3.bed > PNMA3_NM_013364.refGene.bed

grep 'NM_001282535'  ~/public_databases/UCSC/human_Dec2013/misc_tracks/hg38.refGene.2020dec3.bed > PNMA3_NM_001282535.refGene.bed


##### use mafFrags to download alignment for a single ORF specified in a single bed file (if the bed file had >1 ORF I would need to somehow split the maf after getting it):

(mafFetch gets the entire genomic region, whereas mafFrags gets just the exons)

module load Kent_tools

# for NM_013364, just placental mammals
mafFrags -orgs=/fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/conservation_tracks/README.placentalMammals.txt -bed12 -thickOnly hg38 multiz100way PNMA3_NM_013364.refGene.bed PNMA3_NM_013364.refGene.100way.frags.2.maf

maf2fasta_JY.bioperl PNMA3_NM_013364.refGene.100way.frags.2.maf 

removegapsfromalignment.bioperl PNMA3_NM_013364.refGene.100way.frags.2.combined.fa

# for NM_001282535, just placental mammals
mafFrags -orgs=/fh/fast/malik_h/grp/public_databases/UCSC/human_Dec2013/conservation_tracks/README.placentalMammals.txt -bed12 -thickOnly hg38 multiz100way PNMA3_NM_001282535.refGene.bed PNMA3_NM_001282535.refGene.100way.frags.2.maf

maf2fasta_JY.bioperl PNMA3_NM_001282535.refGene.100way.frags.2.maf 

removegapsfromalignment.bioperl PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa

# I wrote a script to check that alignment, but the script helped me realise that the maf alignment is not very good: there are more frameshifts than needed in the poorly conserved regions (so alignment is way out of frame)

./checkAlignmentFrameshiftsStops.bioperl PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.degapped

output = four files: 
 noPseuds.fa 
 pseudReportSummary.txt = num intact genes and pseudogenes
 pseudReportEachGene.txt = which genes are intact/pseuds
 pseudReportDetailed.txt = locations of stop codons/frameshifts in each pseudogene

removegapsfromalignment.bioperl  PNMA3_NM_013364.refGene.100way.frags.2.combined.degapped.noPseuds.fa 


## some commands to help me check what's going on:
splitfastafileextractoneseq.pl PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps NM_013364
translate1frame.bioperl NM_013364.fa 
tblastn -query NM_013364.fa.peps.fasta -db ~/public_databases/UCSC/dog_Sep2011/canFam3.fa -num_threads 4 -out NM_013364.fa.peps.fasta.tblastn_canFam3
blastn -query NM_013364.fa -db ~/public_databases/UCSC/dog_Sep2011/canFam3.fa -num_threads 4 -out NM_013364.fa.blastn_canFam3 -task blastn
splitfastafileextractoneseq.pl PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps canFam3
blastn -query canFam3.fa -db ~/public_databases/UCSC/dog_Sep2011/canFam3.fa -num_threads 4 -out canFam3.fa.blastn_canFam3 -task blastn

# I realized that the maf alignment is not very good- more frameshifts than needed in the poorly conserved regions (so alignment is way out of frame)

I started editing it to make an in-frame alignment but realized it was way to far off.
PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.degapped.inframeManual



## try realigning PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps using MACSE

# realign using MACSE and a less harsh frameshift penalty - PNMA3_NM_013364
module load Java/1.8.0_181
java -jar -Xmx600m /fh/fast/malik_h/grp/malik_lab_shared/bin/macse_v1.2.jar -prog alignSequences -seq PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps -out_NT PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps.MACSE.nt.fa -out_AA PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps.MACSE.aa.fa > PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps.MACSE.log.txt
module purge
grep '>' PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps > PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps.seqorder.txt
reorderseqs.bioperl PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps.MACSE.nt.fa  PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps.seqorder.txt

# realign using MACSE and a less harsh frameshift penalty - PNMA3_NM_001282535
module load Java/1.8.0_181
java -jar -Xmx600m /fh/fast/malik_h/grp/malik_lab_shared/bin/macse_v1.2.jar -prog alignSequences -seq PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.nogaps -out_NT PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.nogaps.MACSE.nt.fa -out_AA PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.nogaps.MACSE.aa.fa > PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.nogaps.MACSE.log.txt
module purge
grep '>' PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.nogaps > PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.nogaps.seqorder.txt
reorderseqs.bioperl PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.nogaps.MACSE.nt.fa  PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.nogaps.seqorder.txt


# parse alignments looking for stops/frameshifts

./checkAlignmentFrameshiftsStops.bioperl --MACSE=1 PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps.MACSE.nt.sorted.fa
removegapsfromalignment.bioperl PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.nogaps.MACSE.nt.sorted.noPseuds.fa

./checkAlignmentFrameshiftsStops.bioperl --MACSE=1 PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.nogaps.MACSE.nt.sorted.fa
removegapsfromalignment.bioperl PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.nogaps.MACSE.nt.sorted.noPseuds.fa



# the older maf alignments - not using these any more

./checkAlignmentFrameshiftsStops.bioperl PNMA3_NM_013364.refGene.100way.frags.2.combined.fa.degapped

./checkAlignmentFrameshiftsStops.bioperl PNMA3_NM_001282535.refGene.100way.frags.2.combined.fa.degapped



#### more notes about 100-way alignment display. I may want to think about parsing the between maf-block info

Gap Annotation
The Display chains between alignments configuration option enables display of gaps between alignment blocks in the pairwise alignments in a manner similar to the Chain track display. The following conventions are used:

Single line: No bases in the aligned species. Possibly due to a lineage-specific insertion between the aligned blocks in the human genome or a lineage-specific deletion between the aligned blocks in the aligning species.
Double line: Aligning species has one or more unalignable bases in the gap region. Possibly due to excessive evolutionary distance between species or independent indels in the region between the aligned blocks in both species.
Pale yellow coloring: Aligning species has Ns in the gap region. Reflects uncertainty in the relationship between the DNA of both species, due to lack of sequence in relevant portions of the aligning species.

Genomic Breaks
Discontinuities in the genomic context (chromosome, scaffold or region) of the aligned DNA in the aligning species are shown as follows:

Vertical blue bar: Represents a discontinuity that persists indefinitely on either side, e.g. a large region of DNA on either side of the bar comes from a different chromosome in the aligned species due to a large scale rearrangement.
Green square brackets: Enclose shorter alignments consisting of DNA from one genomic context in the aligned species nested inside a larger chain of alignments from a different genomic context. The alignment within the brackets may represent a short misalignment, a lineage-specific insertion of a transposon in the human genome that aligns to a paralogous copy somewhere else in the aligned species, or other similar occurrence.


## see other maf tools listed here: http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/

mafFrag - Extract maf sequences for a region from database (perhaps similar to mafFetch, but I specify coords on command line)

mafFrags - Collect MAFs from regions specified in a 6 column bed file (perhaps this is what I need for multi-exon bed intervals?)

mafSpeciesSubset - Extract a maf that just has a subset of species. (perhaps I will want to ignore non-mammals, or bad genomes)



### converting maf to fasta
module load LAST
maf-convert --help


# some conversions that work:
maf-convert axt ZCCHC12plusSmallFlank_100wayAln_hg38.maf > ZCCHC12plusSmallFlank_100wayAln_hg38.axt

maf-convert html ZCCHC12plusSmallFlank_100wayAln_hg38.maf > ZCCHC12plusSmallFlank_100wayAln_hg38.html

# some conversions that don't work:
maf-convert tab ZCCHC12plusSmallFlank_100wayAln_hg38.maf
    maf-convert: error: too many values to unpack

maf-convert blast ZCCHC12plusSmallFlank_100wayAln_hg38.maf
    maf-convert: error: for Blast, each alignment must have 2 sequences

maf-convert blasttab ZCCHC12plusSmallFlank_100wayAln_hg38.maf
    maf-convert: error: for BlastTab, each alignment must have 2 sequences

maf-convert chain ZCCHC12plusSmallFlank_100wayAln_hg38.maf
    maf-convert: error: too many values to unpack

maf-convert psl ZCCHC12plusSmallFlank_100wayAln_hg38.maf
    maf-convert: error: for PSL, each alignment must have 2 sequences

maf-convert sam ZCCHC12plusSmallFlank_100wayAln_hg38.maf
    maf-convert: error: for SAM, each alignment must have 2 sequences

cd test_axt2phy
the unedited axt2phy.pl needs Bio/Graphics/Wiggle.pm, which I could not install, but I commented out that line. After that it runs,    it got just the second sequence for each alignment block.


./axt2phy.pl -species hg38.chrX -axtin ZCCHC12plusSmallFlank_100wayAln_hg38.axt -gffout ZCCHC12plusSmallFlank_100wayAln_hg38.axt.gff -fastaout ZCCHC12plusSmallFlank_100wayAln_hg38.axt.fa


######################## use tblastn of NR database to collect intact orthologs where possible. fill in pseudogenes afterwards.

xx use BLAST to get just intact genes from NCBI NR (require mutual best blast) (won't get pseudogenes, probably)


This does the blast, and returns results in the regular format as well as a tab-delimited format that includes taxonomy info

cd blasts/tblastn_NR/Refseq
../../../scripts/callblastjanetNRntProtquery.bioperl ../../../getHumanPepsFromWillFiles/2020.23.10.humanSeqs.fullLen.Refseq.fa
    xxxx running
cd ../RepBase
../../../scripts/callblastjanetNRntProtquery.bioperl ../../../getHumanPepsFromWillFiles/2020.23.10.humanSeqs.fullLen.Repbase.fa
    xxxx a few failed the first time - re-running

xxx or do I want a blast output that directly includes taxonomic info, rather than me having to look it up by downloading each genbank entry? that should be possible due to recent changes, I think.  Use RID of completed blast search (e.g. Z64K14A0016) for lookup, within 48hrs of blast search completing?  I think someone at NCBI told me how to do this?


../../../scripts/callblastjanetNRntProtquery.bioperl ../../../getHumanPepsFromWillFiles/2020.23.10.humanSeqs.fullLen.Refseq.fa


blast_formatter -rid Z6A9UVFM013 -outfmt "6 qaccver qlen saccver slen evalue score bitscore pident ppos length gapopen qstart qend sstart send sframe staxid ssciname scomname stitle" >> NP_001096619.1-PNMA-5-363.tblastnNR.txt2


###############  drosophila ARC

I also want to do some analysis on the two Drosophila ARC genes to see if the conservation metrics we are considering would work OK for those.

cd ~/FH_fast_storage/miscMalikLab/domesticated_capsid/drosophila_ARC

## get D. melanogaster genes/proteins:

cd melanogaster_reference_seqs

got accessions of dARC1 and dARC2 from NCBI: dARC1.txt dARC2.txt

../../scripts/getgenbankJY_eutils_gbFormat.bioperl -db=nucleotide dARC1.txt dARC2.txt
../../scripts/getCDSseqAndBedFileFromGenbankEntry.bioperl dARC1.txt.gb  dARC2.txt.gb

rm *info.txt *warnings.txt
../../scripts/translate1frame.bioperl dARC1.txt.gb.ORFs dARC2.txt.gb.ORFs

## blast NR
cd ../blasts/tblastn_NR
../../../scripts/callblastjanetNRntProtquery.bioperl ../../melanogaster_reference_seqs/dARC1.txt.gb.ORFs.peps.fa ../../melanogaster_reference_seqs/dARC2.txt.gb.ORFs.peps.fa

../../../scripts/sortBlastHitsBySpecies.pl *tblastnNR.txt
cd hits_each_species
../../../../scripts/getgenbankJY_eutils_gbFormat.bioperl -db=nucleotide hits*.txt 


../../../../scripts/getCDSseqAndBedFileFromGenbankEntry.bioperl -includeNoCDS=0  hits_*.gb
 

##### github reminder: pushing edits back up to the github website:

git status

# subsequent updates:
git add --verbose --all . 
   (the --all also lets it take care of files I remove locally, also removing them from the server)
git commit
    opens up a file in vim where I can make notes about what I've changed. 
    "i" gets me into edit mode in vim
    "escape" gets me out of edit mode
    :wq to save and exit vim 
git push

# first time:
made a README.md file
git init
git add --all . 
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/jayoung/domesticated_capsid.git
git push -u origin main

